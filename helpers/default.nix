{ pkgs, ... }: rec {
  inherit (pkgs) lib;
  math = import ./math.nix { inherit lib; };
  colors = import ./colors.nix { inherit lib; };
  exporters = import ./exporters.nix { inherit pkgs; };


  mkStellaeStamp = ex: el: ''
  Generated by STELLAE: https://github.com/luna-skye/stellae.git
  Exporter: ${ex}
  Element: ${el}'';
  

  # Get all .nix files in a directory as a nix-store path list
  getSubmodulePaths = dir: builtins.concatLists (lib.mapAttrsToList (path: kind:
    if (kind == "directory") then
      # getSubmodulePaths "${builtins.toPath dir}/${path}"
      let file = "${builtins.toPath dir}/${path}/default.nix";
      in if (builtins.pathExists file) then [file] else []
    else
      let file = "${builtins.toPath dir}/${path}";
      in if (builtins.pathExists file) then [file] else []
    )
  (builtins.readDir dir));


  # Imports any found submodules within a path
  importSubmodules = dir: builtins.listToAttrs (builtins.map (path: {
    # Get submodule name from filename without extension, as the attr name
    name = builtins.head (lib.splitString "." (builtins.baseNameOf path));

    # Import the file's lambda function as the attrset value
    value = import path;
  }) (getSubmodulePaths dir));
}
